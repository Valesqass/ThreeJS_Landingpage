{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lahlo\\\\OneDrive\\\\Documents\\\\NEW_START\\\\JS\\\\THREEJS\\\\LANDINGPAGE\\\\landingpage\\\\src\\\\Model.js\",\n  _s = $RefreshSig$();\nimport { useGLTF } from '@react-three/drei';\nimport { useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst latLongToVector3 = (lat, long, radius) => {\n  const phi = (90 - lat) * (Math.PI / 180);\n  const theta = (long + 180) * (Math.PI / 180);\n  return new THREE.Vector3(-radius * Math.sin(phi) * Math.cos(theta), radius * Math.cos(phi), radius * Math.sin(phi) * Math.sin(theta));\n};\nconst CITY = [{\n  name: \"Paris\",\n  // Nom de la ville\n  lat: -11,\n  // Latitude\n  long: -37,\n  // Longitude\n  color: \"#02367b\",\n  // Couleur du marqueur\n  info: {\n    title: \"Paris Data Center\",\n    description: \"Centre de données haute performance\",\n    stats: {\n      servers: \"1500+\",\n      uptime: \"99.999%\",\n      clients: \"350+\"\n    }\n  }\n}, {\n  name: \"New York\",\n  lat: -43,\n  long: -74.0060,\n  color: \"#ff3366\",\n  info: {\n    title: \"NYC Cloud Hub\",\n    description: \"Principal hub cloud pour l'Amérique\",\n    stats: {\n      servers: \"2000+\",\n      uptime: \"99.999%\",\n      clients: \"500+\"\n    }\n  }\n}, {\n  name: \"Tokyo\",\n  lat: 32,\n  long: 200,\n  color: \"#ffcc00\",\n  info: {\n    title: \"Tokyo Tech Center\",\n    description: \"Centre technologique Asie-Pacifique\",\n    stats: {\n      servers: \"1800+\",\n      uptime: \"99.998%\",\n      clients: \"400+\"\n    }\n  }\n}, {\n  name: \"Sydney\",\n  lat: 25,\n  long: 138,\n  color: \"#00ccff\",\n  info: {\n    title: \"Sydney Data Hub\",\n    description: \"Hub principal pour l'Océanie\",\n    stats: {\n      servers: \"1200+\",\n      uptime: \"99.997%\",\n      clients: \"250+\"\n    }\n  }\n}];\nexport function Model(props) {\n  _s();\n  const {\n    nodes,\n    materials\n  } = useGLTF('/earthquakes_-_2000_to_2019.glb');\n  const [selectedCity, setSelectedCity] = useState(null);\n  const groupeRef = useRef();\n  const markersRef = useRef([]);\n  const greenMaterial = new THREE.PointsMaterial({\n    size: 0.01,\n    transparent: false,\n    opacity: 0.8\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ...props,\n    dispose: null,\n    scale: 0.017,\n    ref: groupeRef,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      rotation: [-Math.PI / 2, 0, 0],\n      children: [Object.keys(nodes).map(key => {\n        if (key.startsWith('Object_') && nodes[key].geometry) {\n          return /*#__PURE__*/_jsxDEV(\"points\", {\n            geometry: nodes[key].geometry,\n            material: greenMaterial\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 29\n          }, this);\n        }\n        return null;\n      }), CITY.map((city, index) => {\n        const position = latLongToVector3(city.lat, city.long, 66);\n        return /*#__PURE__*/_jsxDEV(\"group\", {\n          position: position,\n          children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n            ref: el => markersRef.current[index] = el,\n            onClick: () => setSelectedCity(selectedCity === city.name ? null : city.name),\n            onPointerOver: () => {\n              document.body.style.cursor = 'pointer';\n            },\n            onPointerOut: () => {\n              document.body.style.cursor = 'default';\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n              args: [2, 16, 16]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n              color: city.color,\n              toneMapped: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }, this), selectedCity === city.name && /*#__PURE__*/_jsxDEV(Html, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"border-[#808080] border-2 bg-[#808080]/60 backdrop-blur-sm p-4 rounded-lg min-w--[250px] text-white\",\n              children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: city\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 33\n          }, this)]\n        }, city.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\n_s(Model, \"ACga48OzKwhZNJs5rGxKkirTwv4=\", false, function () {\n  return [useGLTF];\n});\n_c = Model;\nvar _c;\n$RefreshReg$(_c, \"Model\");","map":{"version":3,"names":["useGLTF","useRef","useState","THREE","jsxDEV","_jsxDEV","latLongToVector3","lat","long","radius","phi","Math","PI","theta","Vector3","sin","cos","CITY","name","color","info","title","description","stats","servers","uptime","clients","Model","props","_s","nodes","materials","selectedCity","setSelectedCity","groupeRef","markersRef","greenMaterial","PointsMaterial","size","transparent","opacity","dispose","scale","ref","children","rotation","Object","keys","map","key","startsWith","geometry","material","fileName","_jsxFileName","lineNumber","columnNumber","city","index","position","el","current","onClick","onPointerOver","document","body","style","cursor","onPointerOut","args","toneMapped","Html","className","_c","$RefreshReg$"],"sources":["C:/Users/lahlo/OneDrive/Documents/NEW_START/JS/THREEJS/LANDINGPAGE/landingpage/src/Model.js"],"sourcesContent":["import { useGLTF } from '@react-three/drei';\r\nimport { useRef, useState } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nconst latLongToVector3 = (lat, long, radius) => {\r\n    const phi = (90 - lat) * (Math.PI / 180);\r\n    const theta = (long + 180) * (Math.PI / 180);\r\n\r\n    return new THREE.Vector3(\r\n        -radius * Math.sin(phi) * Math.cos(theta),\r\n        radius * Math.cos(phi),\r\n        radius * Math.sin(phi) * Math.sin(theta)\r\n    )\r\n}\r\n\r\nconst CITY = [\r\n    {\r\n        name: \"Paris\", // Nom de la ville\r\n        lat: -11, // Latitude\r\n        long: -37, // Longitude\r\n        color: \"#02367b\", // Couleur du marqueur\r\n        info: {\r\n            title: \"Paris Data Center\",\r\n            description: \"Centre de données haute performance\",\r\n            stats: {\r\n                servers: \"1500+\",\r\n                uptime: \"99.999%\",\r\n                clients: \"350+\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: \"New York\",\r\n        lat: -43,\r\n        long: -74.0060,\r\n        color: \"#ff3366\",\r\n        info: {\r\n            title: \"NYC Cloud Hub\",\r\n            description: \"Principal hub cloud pour l'Amérique\",\r\n            stats: {\r\n                servers: \"2000+\",\r\n                uptime: \"99.999%\",\r\n                clients: \"500+\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: \"Tokyo\",\r\n        lat: 32,\r\n        long: 200,\r\n        color: \"#ffcc00\",\r\n        info: {\r\n            title: \"Tokyo Tech Center\",\r\n            description: \"Centre technologique Asie-Pacifique\",\r\n            stats: {\r\n                servers: \"1800+\",\r\n                uptime: \"99.998%\",\r\n                clients: \"400+\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: \"Sydney\",\r\n        lat: 25,\r\n        long: 138,\r\n        color: \"#00ccff\",\r\n        info: {\r\n            title: \"Sydney Data Hub\",\r\n            description: \"Hub principal pour l'Océanie\",\r\n            stats: {\r\n                servers: \"1200+\",\r\n                uptime: \"99.997%\",\r\n                clients: \"250+\"\r\n            }\r\n        }\r\n    }\r\n];\r\n\r\nexport function Model(props) {\r\n    const { nodes, materials } = useGLTF('/earthquakes_-_2000_to_2019.glb')\r\n    const [selectedCity, setSelectedCity] = useState(null)\r\n    const groupeRef = useRef()\r\n    const markersRef = useRef([])\r\n\r\n    const greenMaterial = new THREE.PointsMaterial({\r\n        size: 0.01,\r\n        transparent: false,\r\n        opacity: 0.8\r\n    })\r\n\r\n\r\n    return (\r\n        <group {...props} dispose={null} scale={0.017} ref={groupeRef}>\r\n            <group rotation={[-Math.PI / 2, 0, 0]}>\r\n                {Object.keys(nodes).map((key) => {\r\n                    if (key.startsWith('Object_') && nodes[key].geometry) {\r\n                        return (\r\n                            <points\r\n                                key={key}\r\n                                geometry={nodes[key].geometry}\r\n                                material={greenMaterial}\r\n\r\n                            />\r\n                        )\r\n                    }\r\n                    return null\r\n                })}\r\n\r\n                {CITY.map((city, index) => {\r\n                    const position = latLongToVector3(city.lat, city.long, 66)\r\n\r\n                    return (\r\n                        <group key={city.name} position={position}>\r\n                            <mesh\r\n                                ref={el => markersRef.current[index] = el}\r\n                                onClick={() => setSelectedCity(selectedCity === city.name ? null : city.name)}\r\n\r\n                                onPointerOver={() => {\r\n                                    document.body.style.cursor = 'pointer'\r\n                                }}\r\n\r\n                                onPointerOut={() => {\r\n                                    document.body.style.cursor = 'default'\r\n                                }}\r\n                            >\r\n\r\n\r\n                                <sphereGeometry args={[2, 16, 16]} />\r\n                                <meshBasicMaterial\r\n                                    color={city.color}\r\n                                    toneMapped={false}\r\n                                />\r\n                            </mesh>\r\n\r\n                            {selectedCity === city.name && (\r\n                                <Html>\r\n                                    <div className='border-[#808080] border-2 bg-[#808080]/60 backdrop-blur-sm p-4 rounded-lg min-w--[250px] text-white'>\r\n                                        <h3>{city}</h3>\r\n                                    </div>\r\n                                </Html>\r\n                            )}\r\n\r\n                        </group>\r\n                    )\r\n                })}\r\n\r\n            </group>\r\n        </group>\r\n    )\r\n}\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}